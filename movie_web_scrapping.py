# -*- coding: utf-8 -*-
"""Movie web scrapping

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xyE7qoFDSSzgtxbU8Tq9oYWmdrCB2IxJ
"""

import requests
from bs4 import BeautifulSoup

url="https://editorial.rottentomatoes.com/guide/best-horror-movies-of-all-time/"

response=requests.get(url)
 response.status_code

soup=BeautifulSoup(response.content,"lxml")

divs=soup.find_all("div",{"class":"col-sm-18 col-full-xs countdown-item-content"})

divs



"""Getting Title,year, and rating of the **movie**"""

divs[0].find('h2')

headings =[div.find("h2")for div in divs]

headings

[heading.text for heading in headings]

headings[0]

#Title
[heading.find("a") for heading in headings]

movie_names =[heading.find("a").string for heading in headings]
movie_names

#year
#headings[0]
[heading.find("span" , class_="subtle start-year" ) for heading in headings]

#year
#headings[0]
# Find the span with class "subtle start-year" for each heading
years_elements = [heading.find("span" , class_="subtle start-year") for heading in headings]

# Extract the string content, handling cases where the span is not found
years = [year_element.string if year_element else None for year_element in years_elements]

years

# year
# headings[0]
# Find the span with class "subtle start-year" for each heading
years_elements = [heading.find("span" , class_="subtle start-year") for heading in headings]

# Extract the string content, handling cases where the span is not found
years = [year_element.string if year_element else None for year_element in years_elements]

# Remove parentheses and convert to integer, handling potential None values
years = [int(year.strip('()')) if year else None for year in years]

years



#ratings
headings[0]

ratings = [heading.find('span' ,class_ = 'tMeterScore').string for heading in headings]
ratings

# ratings = [rate.strip('%') for rate in ratings] # Original line causing the error
# ratings

# Modify the list comprehension to handle None values
ratings = [rate.strip('%') if rate is not None else None for rate in ratings]
ratings

# ratings = [rate.strip('%') for rate in ratings] # Original line causing the error
# ratings

# Modify the list comprehension to handle None values
ratings = [rate.strip('%') if rate is not None else None for rate in ratings]
ratings

"""Directors"""

directors =[div.find("div" ,class_="info director")for div in divs]
directors

directors[0]

# Modify the list comprehension to handle None values in the directors list
[director.find('a') if director is not None else None for director in directors]

# Modify the list comprehension to handle None values in the directors list
# Check if director is not None before calling find, and check if the result of find is not None before accessing .string
directors=[director.find("a").string if director and director.find("a") else None for director in directors]
directors

casting =[div.find("div",class_="info cast")for div in divs]
casting

casting[0]

cast_links =casting[0].find_all("a")
cast_links

cast_names = [link.string for link in cast_links]
cast_names

cast =",".join(cast_names)
cast

cast =[]
for c in casting:
  # Check if the current cast element 'c' is not None
  if c is not None:
    cast_links = c.find_all("a")
    cast_names =[link.string for link in cast_links]
    cast.append(",".join(cast_names))
  else:
      # If 'c' is None, append an empty string or a placeholder
      cast.append("") # Append an empty string for movies without cast info

cast

import pandas as pd

movies_info =pd.DataFrame()
movies_info

from typing import cast
movies_info["Title"]=movie_names
movies_info["year"]=years
movies_info["Ratings"]=ratings
movies_info["Director"]=directors
movies_info["Cast"]=cast
movies_info["genere"]="horror"

movies_info

movies_info.to_csv("movies_info.csv",index=False,header=True)

movies_info.to_excel("movies_info.xlsx",index=False,header=True)